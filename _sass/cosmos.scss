@charset "utf-8";
@use "sass:math";

/* Extra Small devices (up to 600px) */
$max-width-extra-small-devices: 600px !default;
/* Small devices (portrait tablets and large phones, 600px and up) */
$min-width-small-devices: 600px !default;
/* Medium devices (landscape tablets, 768px and up) */
$min-width-medium-devices: 768px !default;
/* Large devices (laptops/desktops, 992px and up) */
$min-width-large-devices: 992px !default;
/* Extra large devices (large laptops and desktops, 1200px and up) */
$min-width-extra-large-devices: 1200px !default;

$base-font-family: 'Open Sans', verdana, arial, sans-serif;
$base-font-size: 16px !default;
$base-font-weight: 300 !default;
$base-letter-spacing: 0.08em;
$base-line-height: 1.5 !default;
$spacing-unit: percentage(0.1) !default;
$text-color: rgb(255, 255, 255) !default;

$background-color: #262626 !default;
$article-background-color: #111;
$brand-color: #2a7ae2 !default;
$grey-color: #828282 !default;
$grey-color-light: lighten($grey-color, 40%) !default;
$grey-color-dark: darken($grey-color, 25%) !default;

$base-box-shadow:
#000000 4px 4px 8px,
#4d4d4d -4px -4px 8px;

$table-text-align: left !default;
$content-width: 1100px !default;
$on-palm: 1100px !default;
$on-laptop: 1100px !default;

@mixin media-query($device) {
  @media screen and (max-width: $device) {
    @content;
  }
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
/// Source: https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    $test: $number * 0 + 1;
    @return calc($number / $test);
  }

  @return $number;
}

/// Responsive font size with Mixins and SASS. 
/// @param {Number} $minFont - Minimun font size
/// @param {Number} $maxFont - Maximum font size
/// @param {Number} $minBreakpoint - Minimum breakpoint to do calculations
/// @param {Number} $maxBreakpoint - Maximum breakpoint to do calculations
/// @return {Number} - font-size with adapted size
/// Source: https://ryanfeigenbaum.com/easy-responsive-typography/ 
@mixin fluid-typography($minFont, $maxFont, $minBreakpoint, $maxBreakpoint) {

  $minBreakpoint: strip-unit($minBreakpoint);
  $maxBreakpoint: strip-unit($maxBreakpoint);

  /* Define variable for media query */
  $maxLessOne: $maxBreakpoint - 1;
  
  /* Define variable for fallback */
  $avg: calc(($maxFont + $minFont) / 2);
 
  /* Base font size */
  font-size: #{$minFont}px;
  
  @media (min-width: #{$minBreakpoint}px) and (max-width: #{$maxLessOne}px) {
    
    /* Adds a fallback for unsupported browsers */
    font-size: #{$avg}px;
      
    /* The fluid typography magic ðŸŒŸ  */
    font-size: calc(#{$minFont}px + (#{$maxFont} - #{$minFont}) * (100vw - #{$minBreakpoint}px) / (#{$maxBreakpoint} - #{$minBreakpoint}))
  }
  
  @media (min-width: #{$maxBreakpoint}px) {
    font-size: #{$maxFont}px;
  }
}

// Import partials.
@import 
"base",
"header",
"sidebar",
"syntax-highlighting",
"splash",
"container",
"article-content",
"home",
"skills",
"timeline"
;